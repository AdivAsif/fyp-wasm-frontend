@inject IBlogClient BlogClient
@using Fyp.API
@using APIException = FinalYearProjectWasmPortal.API.Exception.APIException
@using FinalYearProjectWasmPortal.Helpers
@inherits BlogModalBase

<div class="modal modal-backdrop modal-background" role="dialog" style="padding: 0; display: @ModalDisplay;">
    <div style="height: 100%; width: 100%; position: absolute" @onclick="Close"></div>
    <div class="modal-dialog modal-sm" style="display: table; vertical-align: middle">
        <MudPaper Class="modal-content" Style="border-radius: 13px; padding: 13px; height: 80%; width: 60vw;">
            @if (IsLoading)
            {
                <MudGrid>
                    <MudItem xs="12" sm="12">
                        <MudPaper Class="pa-4 m-4" Style="text-align: center">
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <div class="modal-header">
                    <h3 class="modal-title">@ModalTitle</h3>
                    <a class="ml-auto modal-close" @onclick="Close">
                        &#10006;
                    </a>
                </div>
                <div class="modal-body">
                    <MudContainer Class="row">
                        <MudGrid>
                            <MudItem xs="12" sm="12">
                                <MudPaper Class="pa-4">
                                    <div class="d-flex align-center justify-space-between flex-column">
                                        <MudCardHeader>
                                            Create a new Blog
                                        </MudCardHeader>
                                    </div>
                                    <MudForm @ref="_form" Model="NewBlog" @bind-IsValid="_success">
                                        <MudTextField T="string" Label="Title" Required="true"
                                                      RequiredError="Enter a valid title." ErrorText="Title is required."
                                                      @bind-Value="NewBlog.Title" HelperTextOnFocus="true" HelperText="Enter the title of the blog."/>
                                        <MudSelect T="string" Label="Type" AnchorOrigin="Origin.BottomCenter" Value="@(NewBlog.Type.ToString())" @onselect="@(e => SelectBlogType(Enum.Parse<BlogType>(e.ToString())))">
                                            <MudSelectItem Value="@("Please select a type...")" Disabled="true"></MudSelectItem>
                                            @foreach (var type in Enum.GetValues(typeof(BlogType)).Cast<BlogType>().ToList())
                                            {
                                                <MudSelectItem Value="@type.ToString()"/>
                                            }
                                        </MudSelect>
                                        <MudTextField T="string" Label="Content" Required="true"
                                                      RequiredError="Enter a valid body." ErrorText="Body is required."
                                                      @bind-Value="NewBlog.Content" HelperTextOnFocus="true" HelperText="Enter the body of the blog."/>
                                        <div class="d-flex align-center justify-content-center">
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                       Disabled="@(!_success || _uploading)" OnClick="CreateOrUpdateBlog"
                                                       Class="text-center">
                                                Create Blog
                                            </MudButton>
                                        </div>
                                    </MudForm>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                </div>
            }
        </MudPaper>
    </div>
</div>

@code {

    public async Task Initialise()
    {
        ModalTitle = "Create a new Blog";
        StateHasChanged();
    }

    private async Task CreateOrUpdateBlog()
    {
        _uploading = true;
        try
        {
            await BlogClient.CreateOrUpdateBlogAsync(NewBlog);
            await DisplaySuccess("Successfully created blog.");
            Close();
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
        finally
        {
            _uploading = false;
            StateHasChanged();
        }
    }

    private void SelectBlogType(BlogType type)
    {
        Console.WriteLine(type);
        NewBlog.Type = Enum.Parse<BlogType>(type.ToString());
    }

    private MudForm _form = new();
    private bool _uploading;
    private bool _success;
    private BlogDto NewBlog { get; set; } = new();

}