@page "/Requests"
@inject IMatchClient MatchClient
@inject NavigationManager NavigationManager
@inject ProfileStateService ProfileStateService
@inherits MatchComponentBase
@using Fyp.API
@using FinalYearProjectWasmPortal.Services
@using FinalYearProjectWasmPortal.Helpers
@implements IDisposable

<CascadingValue Value="this">
    <MudContainer MaxWidth="MaxWidth.Large">
        @if (IsLoading)
        {
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudPaper Class="pa-4 m-4" Style="text-align: center">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <UserMatchModal @ref="_userMatchModal"></UserMatchModal>
            <MudGrid>
                @if (!Requests.Any())
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info">No requests found, use existing chats or come back later.</MudAlert>
                    </MudItem>
                    <MudItem xs="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudSkeleton Animation="Animation.Wave" Width="40%"/>
                                    <MudSkeleton Animation="Animation.Wave" Width="60%"/>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px"/>
                            <MudCardContent>
                                <MudSkeleton Animation="Animation.Wave"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2"/>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2"/>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudSkeleton Animation="Animation.Wave" Width="40%"/>
                                    <MudSkeleton Animation="Animation.Wave" Width="60%"/>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px"/>
                            <MudCardContent>
                                <MudSkeleton Animation="Animation.Wave"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2"/>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2"/>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudSkeleton Animation="Animation.Wave" Width="40%"/>
                                    <MudSkeleton Animation="Animation.Wave" Width="60%"/>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px"/>
                            <MudCardContent>
                                <MudSkeleton Animation="Animation.Wave"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2"/>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2"/>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
                else
                {
                    @foreach (var request in Requests)
                    {
                        <MudItem xs="4">
                            <MudCard Class="pa-4 position-relative custom-card" Style="height: 100%" @onclick="@(async () => await OpenUserMatchModal(request.FromUser))">
                                <MudCardHeader>
                                    <MudGrid Class="position-relative">
                                        <div class="d-flex justify-content-center profile-avatar-container profile-backdrop">
                                            <MudImage Src="@(request.FromUser?.ProfileDetails?.BannerUrl)" Alt="" Class="profile-backdrop"></MudImage>
                                        </div>
                                        <MudItem xs="3"></MudItem>
                                        <MudItem xs="6" Class="d-flex justify-content-center">
                                            <div class="profile-avatar-container">
                                                <MudAvatar Color="Color.Primary" Style="width: 200px; height: 200px">
                                                    @if (!string.IsNullOrWhiteSpace(request.FromUser?.ProfileDetails?.ProfilePictureUrl))
                                                    {
                                                        <MudImage Src="@(request.FromUser?.ProfileDetails?.ProfilePictureUrl)" Alt=""></MudImage>
                                                    }
                                                    else
                                                    {
                                                        @UserInfo?.Username?[0]
                                                    }
                                                </MudAvatar>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="3"></MudItem>
                                    </MudGrid>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@request.FromUser?.Username</MudText>
                                    <MudText Typo="Typo.body1">They are feeling: @request.FromUser?.ProfileDetails.Mood</MudText>
                                    <MudText Typo="Typo.h6">Biography:</MudText>
                                    <MudText Typo="Typo.body2">@request.FromUser?.ProfileDetails.Biography</MudText>
                                    <MudText Typo="Typo.h6">Information:</MudText>
                                    <MudText Typo="Typo.body2">@request.FromUser?.ProfileDetails.Gender - @request.FromUser?.ProfileDetails.Pronoun</MudText>
                                    <MudText Typo="Typo.body2">@request.FromUser?.ProfileDetails.DateOfBirth.GetValueOrDefault().ToString("dd/MM/yyyy")</MudText>
                                    <MudText Typo="Typo.h6">They said:</MudText>
                                    <MudText Typo="Typo.body1">@request.FirstMessage</MudText>
                                </MudCardContent>
                                <MudCardActions Class="d-flex justify-content-center">
                                    <MudButtonGroup Class="position-absolute" Style="bottom: 0">
                                        <MudTooltip Placement="Placement.Top" Text="Match with this user">
                                            <MudIconButton Icon="@Icons.Material.Filled.AutoAwesome" Color="Color.Default"
                                                           OnClick="@(async () => await OpenUserMatchModal(request.FromUser))"/>
                                        </MudTooltip>
                                        <MudTooltip Placement="Placement.Top" Text="Skip this user">
                                            <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Error"/>
                                        </MudTooltip>
                                    </MudButtonGroup>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        }
    </MudContainer>
</CascadingValue>

@code {

    protected override async Task OnInitializedAsync()
    {
        StartLoading();
        ProfileStateService.OnChange += StateHasChanged;
        ProfileInfo = await ProfileStateService.GetProfileInfo();
        if (ProfileInfo == null)
        {
            NavigationManager.NavigateTo("/Profile", true);
        }
        StopLoading();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetRequests();
        }
    }

    public async Task GetRequests()
    {
        try
        {
            var requests = await MatchClient.GetMatchRequestsAsync();
            Requests = requests.Data.ToList();
            StateHasChanged();
            await DisplaySuccess("Match requests found.");
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
    }

    public void Dispose()
    {
        ProfileStateService.OnChange -= StateHasChanged;
    }

    private async Task OpenUserMatchModal(UserDto user)
    {
        _userMatchModal.Close();
        await _userMatchModal.Initialise(user);
        _userMatchModal.Open();
    }

    [CascadingParameter]
    public UserInfo? UserInfo { get; set; }

    public List<MatchDto> Requests { get; set; } = new();
    public ProfileInfo? ProfileInfo { get; set; }

    private UserMatchModal _userMatchModal = new();

}