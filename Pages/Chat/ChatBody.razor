@inject IChatClient ChatClient
@using Fyp.API
@using FinalYearProjectWasmPortal.Helpers
@inherits ChatComponentBase

<MudPaper Class="py-4 flex-grow-1" Elevation="25">
    <div class="d-flex flex-column px-4" style="max-height: 60vh; min-height: 60vh; overflow: scroll" id="chatContainer">
        @if (Main != null && !Main.ChatRooms.Data.Any())
        {
            <div class="d-flex flex-row my-4">

                <div>
                    <MudText Typo="Typo.h5">You have no matches yet, check the Match page!</MudText>
                </div>
            </div>
        }
        else
        {
            @foreach (var message in ListOfMessages)
            {
                <div class="d-flex flex-row my-4">
                    <div class="mr-4">
                        <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                            @message.Username[0]
                        </MudAvatar>
                    </div>
                    <div>
                        <MudText Typo="Typo.body1">@message.Username</MudText>
                        <MudText Typo="Typo.caption">@message.Timestamp.GetValueOrDefault().ToString("dd MM yyyy hh:mm tt")</MudText>
                        <MudText Typo="Typo.body2">@message.Content</MudText>
                    </div>
                </div>
            }
        }
    </div>
    <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
        <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-4"
                      @bind-Value="NewMessage.Content" @bind-Value:event="oninput" OnKeyDown="Typing"/>
        <MudButton OnClick="SendMessage" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button">Send</MudButton>
    </MudPaper>
</MudPaper>

@code {

    private async Task SendMessage()
    {
        _sending = true;
        try
        {
            if (string.IsNullOrWhiteSpace(NewMessage.Content))
                return;

            if (Main is {SelectedRoom: null })
            {
                var newRoom = await ChatClient.CreateRoomAsync(Main.UserInfo?.UserId, NewMessage);
                Main.ChatRooms.Data.Add(newRoom.Data);
                Main.SelectedRoom = newRoom.Data;
                await DbRefresh.InvokeAsync();
            }
            else
            {
                NewMessage.RoomId = Main!.SelectedRoom.Id;
                await ChatClient.SendMessageAsync(NewMessage);
            }
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
        finally
        {
            NewMessage.Content = string.Empty;
            if (Main is {SelectedRoom: not null })
            {
                await ChatClient.TypingAsync(new TypingDto { RoomId = Main.SelectedRoom.Id, Typing = false });
            }
            _sending = false;
            StateHasChanged();
        }
    }

    public async Task Typing(KeyboardEventArgs e)
    {
        if (Main is {SelectedRoom: null })
            return;
        if (e.Code is "Enter" or "NumpadEnter")
            await SendMessage();
        if (string.IsNullOrWhiteSpace(e.Code))
            await ChatClient.TypingAsync(new TypingDto { RoomId = Main!.SelectedRoom.Id, Typing = false });
        else
            await ChatClient.TypingAsync(new TypingDto { RoomId = Main!.SelectedRoom.Id, Typing = true });
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    [Parameter]
    public EventCallback DbRefresh { get; set; }

    [Parameter]
    public EventCallback ShowOlderMessages { get; set; }

    [Parameter]
    public EventCallback ToggleRoomList { get; set; }

    [Parameter]
    public bool ShowViewOlderMessages { get; set; }

    [Parameter]
    public List<ChatMessageDto> ListOfMessages { get; set; } = new();

    public ChatMessageDto NewMessage { get; set; } = new();
    public bool _sending;

}