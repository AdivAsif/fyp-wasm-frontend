@inject IChatClient ChatClient
@inject IJSRuntime JsRuntime
@using Microsoft.AspNetCore.SignalR.Client
@using Fyp.API
@using FinalYearProjectWasmPortal.Helpers
@inherits ChatComponentBase

<MudPaper Class="py-4 flex-grow-1" Elevation="25">
    <div class="d-flex flex-column px-4" style="max-height: 50vh; min-height: 50vh; overflow: scroll" id="chatContainer">
        @if (Main != null && !Main.ChatRooms.Data.Any())
        {
            <div class="d-flex flex-row my-4">
                <div>
                    <MudText Typo="Typo.h5">You have no matches yet, check the Match page!</MudText>
                </div>
            </div>
        }
        else
        {
            @foreach (var group in GenerateMessageGroups())
            {
                <div class="d-flex flex-row my-4">
                    <div class="mr-4">
                        <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                            @if (Main?.SelectedRoom?.FromUserId == group.First().UserId && !string.IsNullOrWhiteSpace(Main?.SelectedRoom?.FromUser.ProfileDetails.ProfilePictureUrl))
                            {
                                <MudImage Src="@(Main?.SelectedRoom?.FromUser.ProfileDetails.ProfilePictureUrl)" Class="avatar-image"></MudImage>
                            }
                            else if (Main?.SelectedRoom?.ToUserId == group.First().UserId && !string.IsNullOrWhiteSpace(Main?.SelectedRoom?.ToUser.ProfileDetails.ProfilePictureUrl))
                            {
                                <MudImage Src="@(Main?.SelectedRoom?.ToUser.ProfileDetails.ProfilePictureUrl)" Class="avatar-image"></MudImage>
                            }
                            else
                            {
                                @group.First().Username[0]
                            }
                        </MudAvatar>
                    </div>
                    <div style="width: 100%">
                        <MudText Typo="Typo.body1">@group.First().Username</MudText>
                        <div class="d-flex flex-column">
                            @foreach (var message in group)
                            {
                                <div class="message-container @(message.Content.Length > 50 ? "long-text" : "")">
                                    <MudText Typo="Typo.body2">@message.Content</MudText>
                                    <MudText Typo="Typo.caption" Class="timestamp">@message.Timestamp.GetValueOrDefault().ToString("dd/MM/yyyy hh:mm tt")</MudText>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4 chat-container" Style="">
        @if (Main is {IsTyping.Typing: true } && Main.IsTyping.FromUserId != Main.UserInfo?.UserId)
        {
            <MudPaper class="typing-indicator-container">
                <MudText Typo="Typo.body2" Class="typing-name">
                    @Main.IsTyping.FromUsername
                </MudText>
                <div class="typing-indicator ml-2">
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </MudPaper>
        }
        <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-4"
                      @bind-Value="NewMessage.Content" OnKeyDown="@(async e => await TextFieldDown(e))"/>
        <MudButton OnClick="@(async () => await SendMessage())" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button" Disabled="_sending">Send</MudButton>
    </MudPaper>
</MudPaper>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
        }
    }

    private async Task SendMessage(KeyboardEventArgs? e = null)
    {
        if (e != null)
            if (e.Code != "Enter" && e.Code != "NumpadEnter") return;
        _sending = true;
        try
        {
            if (string.IsNullOrWhiteSpace(NewMessage.Content))
            {
                return;
            }

            if (Main is {SelectedRoom: null })
            {
                var newRoom = await ChatClient.CreateRoomAsync(Main.UserInfo?.UserId, NewMessage);
                Main.ChatRooms.Data.Add(newRoom.Data);
                Main.SelectedRoom = newRoom.Data;
                await DbRefresh.InvokeAsync();
            }
            else
            {
                NewMessage.RoomId = Main!.SelectedRoom.Id;
                await ChatClient.SendMessageAsync(NewMessage);
                await ScrollToBottom();
                NewMessage.Content = string.Empty;
            }
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    private async Task TextFieldDown(KeyboardEventArgs e)
    {
        if (Main is { SelectedRoom: null })
            return;

        if (e.Code is "Enter" or "NumpadEnter" && !string.IsNullOrWhiteSpace(NewMessage.Content))
        {
            await SendMessage(e);
        }

        var typing = !string.IsNullOrWhiteSpace(e.Code);
        if (Main is { Connection: not null })
        {
            await Main.Connection.InvokeAsync("Typing",
                Main.SelectedRoom.Id,
                Main.UserInfo?.UserId,
                Main.UserInfo?.Username,
                Main.SelectedRoom.ToUserId,
                Main.SelectedRoom.ToUser.Username,
                typing);

            await _typingDelayCancellationTokenSource.CancelAsync();
            if (typing)
            {
                _typingDelayCancellationTokenSource = new CancellationTokenSource();

                try
                {
                    await Task.Delay(2000, _typingDelayCancellationTokenSource.Token);
                    await Main.Connection.InvokeAsync("Typing",
                        Main.SelectedRoom.Id,
                        Main.UserInfo?.UserId,
                        Main.UserInfo?.Username,
                        Main.SelectedRoom.ToUserId,
                        Main.SelectedRoom.ToUser.Username,
                        false);
                }
                catch (TaskCanceledException)
                {
                }
            }
        }
        StateHasChanged();
    }

    public async Task Typing(KeyboardEventArgs e)
    {
        if (Main is {SelectedRoom: null })
            return;
        var typing = !string.IsNullOrWhiteSpace(e.Code);
        if (Main is {Connection: not null })
        {
            await Main.Connection.InvokeAsync("Typing",
                Main.SelectedRoom.Id,
                Main.UserInfo?.UserId,
                Main.UserInfo?.Username,
                Main.SelectedRoom.ToUserId,
                Main.SelectedRoom.ToUser.Username,
                typing);

            await _typingDelayCancellationTokenSource.CancelAsync();
            if (typing)
            {
                _typingDelayCancellationTokenSource = new CancellationTokenSource();

                try
                {
                    await Task.Delay(2000, _typingDelayCancellationTokenSource.Token);
                    await Main.Connection.InvokeAsync("Typing",
                        Main.SelectedRoom.Id,
                        Main.UserInfo?.UserId,
                        Main.UserInfo?.Username,
                        Main.SelectedRoom.ToUserId,
                        Main.SelectedRoom.ToUser.Username,
                        false);
                }
                catch (TaskCanceledException)
                {
                }
            }
        }
        StateHasChanged();
    }

    private void UpdateContent(ChangeEventArgs e)
    {
        NewMessage.Content = e.Value?.ToString();
    }

    private void ShowTimestamp(Guid messageId)
    {
        _visibleTimestampId = messageId;
        StateHasChanged();
    }

    private void HideTimestamp(Guid messageId)
    {
        _visibleTimestampId = new Guid();
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");
    }

    private List<List<ChatMessageDto>> GenerateMessageGroups()
    {
        var groups = new List<List<ChatMessageDto>>();
        var currentGroup = new List<ChatMessageDto>();
        ChatMessageDto? previousMessage = null;
        var threshold = TimeSpan.FromMinutes(2);

        foreach (var message in ListOfMessages)
        {
            if (previousMessage == null)
            {
                currentGroup.Add(message);
            }
            else
            {
                if (message.UserId == previousMessage.UserId && message.Timestamp - previousMessage.Timestamp <= threshold)
                {
                    currentGroup.Add(message);
                }
                else
                {
                    groups.Add(currentGroup);
                    currentGroup = new List<ChatMessageDto> {message};
                }
            }

            previousMessage = message;
        }

        if (currentGroup.Any())
        {
            groups.Add(currentGroup);
        }

        return groups;
    }

    [Parameter]
    public EventCallback DbRefresh { get; set; }

    [Parameter]
    public EventCallback ShowOlderMessages { get; set; }

    [Parameter]
    public EventCallback ToggleRoomList { get; set; }

    [Parameter]
    public bool ShowViewOlderMessages { get; set; }

    [Parameter]
    public List<ChatMessageDto> ListOfMessages { get; set; } = new();

    public ChatMessageDto NewMessage { get; set; } = new();
    public bool _sending;

    private CancellationTokenSource _typingDelayCancellationTokenSource = new();
    private Guid _visibleTimestampId;

}