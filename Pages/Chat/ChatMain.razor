@page "/Chat"
@layout MainLayout
@inject IChatClient ChatClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProfileStateService ProfileStateService
@inject IConfiguration Configuration
@inherits ChatComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@using FinalYearProjectWasmPortal.Services
@using Fyp.API
@using FinalYearProjectWasmPortal.Helpers
@using Microsoft.AspNetCore.Http.Connections
@implements IDisposable

<CascadingValue Value="this">
    <MudContainer MaxWidth="MaxWidth.Large">
        @if (IsLoading)
        {
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudPaper Class="pa-4 m-4" Style="text-align: center">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12">
                    <ChatHeader></ChatHeader>
                </MudItem>
                <MudItem xs="4">
                    <ChatRoomList OnRoomSelect="OnRoomSelect" LoadMoreChatRooms="LoadMoreChatRooms"></ChatRoomList>
                </MudItem>
                <MudItem xs="8">
                    <ChatBody ListOfMessages="ListOfMessages" DbRefresh="RefreshDbPull"
                              ShowOlderMessages="GetOlderChatMessages" ToggleRoomList="ToggleRoomList"
                              ShowViewOlderMessages="ShowOlderMessages">
                    </ChatBody>
                </MudItem>
            </MudGrid>
        }
    </MudContainer>
</CascadingValue>

@code {

    protected override async Task OnInitializedAsync()
    {
        StartLoading();
        ProfileInfo = await ProfileStateService.GetProfileInfo();
        if (ProfileInfo == null)
            NavigationManager.NavigateTo("/Profile", true);


        await LoadChatRooms();
        if (!string.IsNullOrWhiteSpace(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query) && Guid.TryParse(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query[1..], out var parsedGuid))
        {
            RoomId = parsedGuid;
            SelectedRoom = ChatRooms.Data.FirstOrDefault(r => r.Id == RoomId);
        }
        else
        {
            SelectedRoom = ChatRooms.Data.FirstOrDefault();
        }
        if (SelectedRoom?.Id != null)
        {
            if (Connection != null)
                await Connection.InvokeAsync("JoinRoom", SelectedRoom?.Id);
            await GetMessagesForRoom(ChatMessageResultsPageAmount);
        }
        StateHasChanged();
        StopLoading();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var bearerToken = authenticationState.User.Claims.FirstOrDefault(c => c.Type == Constants.Claims.AccessToken)?.Value;
            var hubUrl = Configuration.GetSection("AppSettings")["APIBaseUrl"] + "/ChatHub";
            Connection = new HubConnectionBuilder().WithUrl(hubUrl, HttpTransportType.WebSockets, options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(bearerToken);
                options.SkipNegotiation = true;
            })
                .ConfigureLogging(logging => { logging.AddDebug(); }).Build();
            Connection.Closed += async error =>
            {
                if (error != null && error.Message.Contains("401"))
                {
                    await Task.Delay(new Random().Next(0, 5) * 1000);
                    await Connection.StartAsync();
                }
            };

            Connection.On<ChatMessageDto>("ReceiveMessage", async message =>
            {
                var destinationChatRoom = ChatRooms.Data.FirstOrDefault(r => r.Id == message.RoomId);
                if (destinationChatRoom != null)
                {
                    destinationChatRoom.UpdatedAt = message.Timestamp;

                    var existingMessage = ListOfMessages.FirstOrDefault(m => m.Id == message.Id);
                    if (existingMessage != null)
                    {
                        existingMessage = message;
                    }
                    else
                    {
                        ListOfMessages.Add(message);
                    }
                }
                else
                {
                    await LoadChatRooms();
                }
                StateHasChanged();
            });

            Connection.On<ChatMessageReadDto>("MessageRead", messageRead =>
            {
                var destinationChatRoom = ChatRooms.Data.FirstOrDefault(r => r.Id == messageRead.RoomId);
                if (destinationChatRoom != null)
                {
                    var readMessage = ListOfMessages.FirstOrDefault(m => m.Id == messageRead.MessageId);
                    if (readMessage != null)
                        readMessage.ReadAt = messageRead.ReadAt;
                }
                StateHasChanged();
            });

            Connection.On<ChatRoomDto>("RoomUpdate", async room =>
            {
                var destinationChatRoom = ChatRooms.Data.FirstOrDefault(r => r.Id == room.Id);
                if (destinationChatRoom != null)
                {
                    destinationChatRoom.UpdatedAt = room.UpdatedAt;
                    destinationChatRoom.LastMessageReceived = room.LastMessageReceived;
                    destinationChatRoom.MostRecentMessage = room.MostRecentMessage;
                    destinationChatRoom.MessageCount = room.MessageCount;
                }

                StateHasChanged();
            });

            Connection.On<TypingDto>("Typing", typing =>
            {
                if (SelectedRoom != null && SelectedRoom.Id == typing.RoomId && typing.FromUserId != UserInfo?.UserId)
                {
                    IsTyping = typing;
                }
                StateHasChanged();
            });

            try
            {
                await Connection.StartAsync();
            }
            catch (APIException ex)
            {
                await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
            }
        }
    }

    public async Task LoadChatRooms()
    {
        try
        {
            ChatRoomPage = 1;
            var roomsResponse = await ChatClient.GetChatRoomsAsync(ChatRoomPage, ChatRoomPageSize);
            ChatRooms = roomsResponse.Data;
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async Task GetMessagesForRoom(int noOfMessages)
    {
        try
        {
            var listOfAllMessages = new List<ChatMessageDto>();
            var allMessageResponse = await ChatClient.GetMessagesAsync(SelectedRoom?.Id, 0);
            listOfAllMessages = allMessageResponse.Data.Data.ToList();
            var offset = 0;
            if (noOfMessages < listOfAllMessages.Count && listOfAllMessages.Count < 20)
            {
                offset = listOfAllMessages.Count - noOfMessages;
            }
            if (listOfAllMessages.Count < noOfMessages)
            {
                ShowOlderMessages = false;
            }
            else
            {
                ShowOlderMessages = true;
            }
            var messageResponse = await ChatClient.GetMessagesAsync(SelectedRoom?.Id, listOfAllMessages.Count, -noOfMessages);
            ListOfMessages = messageResponse.Data.Data.ToList();
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
    }

    public async Task BodyRefresh()
    {
        StateHasChanged();
        SelectedRoom = null;
    }

    public async Task RefreshDbPull()
    {
        await OnInitializedAsync();
    }

    public async Task ToggleRoomList()
    {
        HideRoomList = !HideRoomList;
        StateHasChanged();
    }

    private async Task GetOlderChatMessages()
    {
        ChatMessageResultsPageAmount += 15;
        await GetMessagesForRoom(ChatMessageResultsPageAmount);
    }

    private async Task LoadMoreChatRooms()
    {
        ChatRoomPage += 1;
        var roomsResponse = await ChatClient.GetChatRoomsAsync(ChatRoomPage, ChatRoomPageSize);
        ChatRooms.TotalResults = roomsResponse.Data.TotalResults;
        foreach (var room in roomsResponse.Data.Data)
        {
            var existingRoom = ChatRooms.Data.FirstOrDefault(r => r.Id == room.Id);
            if (existingRoom != null)
            {
                existingRoom.UpdatedAt = room.UpdatedAt;
                existingRoom.LastMessageReceived = room.LastMessageReceived;
                existingRoom.MostRecentMessage = room.MostRecentMessage;
                existingRoom.MessageCount = room.MessageCount;
            }
            else
            {
                ChatRooms.Data.Add(room);
            }
        }

        StateHasChanged();
    }

    private async Task OnRoomSelect(Guid roomId)
    {
        if (SelectedRoom != null && Connection != null && SelectedRoom.Id != roomId)
            await Connection.InvokeAsync("LeaveRoom", roomId);
        var room = ChatRooms.Data.FirstOrDefault(r => r.Id == roomId);
        if (Connection != null)
            await Connection.InvokeAsync("JoinRoom", roomId);
        if (SelectedRoom != null)
        {
            await ChatClient.TypingAsync(new TypingDto {RoomId = SelectedRoom.Id, Typing = false});
        }
        SelectedRoom = room;
        ChatBody.NewMessage.RoomId = roomId;
        ChatBody.NewMessage.Content = string.Empty;

        IsTyping = null;

        await GetMessagesForRoom(ChatMessageResultsPageAmount);
        StateHasChanged();
        ChatBody.Refresh();
    }

    void IDisposable.Dispose()
    {
        Connection?.DisposeAsync();
    }

    protected ChatBody ChatBody = new();

    [CascadingParameter]
    public UserInfo? UserInfo { get; set; }

    public ProfileInfo? ProfileInfo { get; set; }
    public TypingDto? IsTyping;
    public ChatRoomDtoPagedResponse ChatRooms { get; set; } = new() {Data = new List<ChatRoomDto>()};
    public bool HideRoomList;
    public ChatRoomDto? SelectedRoom { get; set; }
    public int ChatRoomPageSize = 20;
    public int ChatRoomPage { get; set; } = 1;
    public int ChatMessageResultsPageAmount { get; set; } = 10;
    public Guid? RoomId { get; set; }
    public HubConnection? Connection;

    private bool ShowOlderMessages { get; set; }
    private List<ChatMessageDto> ListOfMessages { get; set; } = new();

}