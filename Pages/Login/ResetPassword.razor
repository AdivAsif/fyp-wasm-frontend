@page "/ResetPassword"
@layout LoginLayout
@using Fyp.API
@using FinalYearProjectWasmPortal.Helpers
@inherits LoginComponentBase
@inject IAuthClient AuthClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingValue Value="this">
    <MudContainer>
        @if (IsLoading)
        {
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudPaper Class="pa-4 m-4" Style="text-align: center">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudPaper Class="pa-4 m-4">
                        <div class="d-flex align-center justify-space-between flex-column">
                            <MudCardHeader>
                                Reset your password
                            </MudCardHeader>
                        </div>
                        <MudForm @ref="_form" @bind-IsValid="@_success" Model="SetPasswordRequest">
                            <MudTextField T="string" Label="Password" @bind-Value="@SetPasswordRequest.Password"
                                          Required="true" HelperText="Choose a strong password (at least 1 number and special character)"
                                          RequiredError="Password is required." ErrorText="Password is required." InputType="InputType.Password"
                                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"/>
                            <MudTextField T="string" Label="Confirm Password" @bind-Value="SetPasswordRequest.ConfirmPassword" Required="true"
                                          RequiredError="Repeat the password." HelperText="Repeat the password." InputType="InputType.Password"
                                          HelperTextOnFocus="true" Validation="@(new Func<string, string>(PasswordMatch))"/>
                            <div class="d-flex align-center justify-space-between flex-column">
                                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="HandleResetPassword" Disabled="@(!_success)" Class="text-center">
                                    Reset Password
                                </MudButton>
                            </div>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </MudContainer>
</CascadingValue>

@code {

    protected override async Task OnInitializedAsync()
    {
        StartLoading();
        StopLoading();
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required.";
            yield break;
        }
        if (pw.Length < 8)
            yield return "The password must be at least 8 characters.";
        if (!pw.Any(char.IsDigit))
            yield return "The password must contain at least 1 number.";
        if (pw.All(char.IsLetterOrDigit))
            yield return "The password must contain at least 1 special character.";
    }

    private string? PasswordMatch(string confirmPw)
    {
        return SetPasswordRequest.Password != confirmPw ? "The passwords do not match." : null;
    }

    private async Task HandleResetPassword()
    {
        try
        {
            var token = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
            SetPasswordRequest.Token = token;
            await AuthClient.SetPasswordAsync(SetPasswordRequest);
            await DisplaySuccess("Successfully changed password.");
            await Task.Delay(400);
            NavigationManager.NavigateTo("/Login", true);
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
            await Task.Delay(400);
            NavigationManager.NavigateTo("/Login", true);
        }
    }

    private bool _success;
    private MudForm _form = new();
    private SetPasswordRequestDto SetPasswordRequest { get; } = new();

}