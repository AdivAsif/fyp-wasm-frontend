@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using FinalYearProjectWasmPortal.Services
@using System.Security.Claims
@inherits LayoutComponentBase

<PageTitle>MoonlitMind</PageTitle>
<MudThemeProvider @ref="_mudThemeProvider" Theme="_myTheme" @bind-IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<CascadingValue Value="UserInfo">
    <MudLayout>
        <Sidebar/>
        <MudMainContent Style="height: 100%; min-height: 100vh">
            @Body
        </MudMainContent>
        <MudAppBar Bottom="true" Fixed="false" Color="Color.Transparent">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Style="width: 100%">
                <MudButton>About</MudButton>
                <MudButton>GitHub</MudButton>
                <div class="flex-grow-1"></div>
                <MudIconButton OnClick="@(() => _isDarkMode = !_isDarkMode)" Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Class="ma-4" Variant="Variant.Outlined"/>
            </MudStack>
        </MudAppBar>
    </MudLayout>
</CascadingValue>

@code {

    protected override async Task OnInitializedAsync()
    {
        await Authenticate();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            await JsRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");
            StateHasChanged();
        }
    }

    private async Task Authenticate()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var identity = (ClaimsIdentity) authenticationState.User.Identity!;
        if (identity.IsAuthenticated)
            UserInfo = new UserInfo(authenticationState);
        else
            NavigationManager.ToAbsoluteUri("/Login");
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
    }

    public UserInfo? UserInfo;

    private readonly MudTheme _myTheme = new()
    {
        Palette = new Palette
        {
            Primary = Colors.Green.Darken1,
            Secondary = Colors.Purple.Darken1,
            Tertiary = Colors.LightBlue.Default
        }
    };

    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

}