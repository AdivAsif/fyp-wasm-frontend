@inject NavigationManager NavigationManager
@using FinalYearProjectWasmPortal.Services
@using Fyp.API
@using FinalYearProjectWasmPortal.Helpers
@inherits DefaultComponentBase
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IAuthClient AuthClient

<MudDrawer @bind-Open="@_open" Elevation="1" Variant="DrawerVariant.Mini" OpenMiniOnHover="true" Fixed="true">
    <MudNavMenu Class="position-relative" Style="height: 100%">
        <MudNavLink Match="NavLinkMatch.All" Href="/Profile" Icon="@Icons.Material.Filled.Person" Style="height: 60px">Profile</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/Match" Icon="@Icons.Material.Filled.AutoAwesome" Style="height: 60px">Match</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/Chat" Icon="@Icons.Material.Filled.Message" Style="height: 60px">Chat</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/Blog" Icon="@Icons.Material.Filled.Newspaper" Style="height: 60px">Blog</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" Style="position: absolute; bottom: 0; height: 60px">Logout</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code {

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task Logout()
    {
        try
        {
            await AuthClient.LogoutAsync();
            await AuthenticationStateProvider.ClearAuthenticationStateAsync();
            await DisplaySuccess("Successfully logged out.");
            await Task.Delay(400);
            NavigationManager.NavigateTo("/", true);
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
    }

    void ToggleDrawer()
    {
        _open = !_open;
    }

    [CascadingParameter]
    public UserInfo? UserInfo { get; set; }

    private bool _open = false;

}